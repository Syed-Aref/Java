#import java.util.*;
//LinkedList//
		 LinkedList<Integer> ill = new LinkedList<Integer>();
		 ill.add(4);
		 ill.add(56);
		 System.out.println(ill);
                 //removeFirst(): This method removes and returns the first element from this list//
                 //removeLast(): This method removes and returns the last element from this list//
		 /*
                 Remove object: 
                 -->For Integer:		
                 LinkedList<Integer> ill = new LinkedList<Integer>();
		 ill.add(4);
		 ill.add(56);
		 System.out.println(ill);
		 ill.remove(new Integer(56));
		 -->For String:
		 LinkedList<String> sll = new LinkedList<String>();
		 sll.add("kdfwk");
		 sll.add("kwsk");
		 sll.add("kwxxk");
		 sll.add("kddwk");
		 sll.remove("kwxxk");
                 */
		 Transferring into object array
		 Object[] a = ill.toArray();//Works in both//
		 //list transformed into object array where each element is object//
		 */
		 /* 
		 List copy:
		 LinkedList<Integer> li1 = new LinkedList<Integer>();
		 li1.add(98);
		 ......
		 ......
		 LinkedList<Integer> li2 = new LinkedList<Integer>(li1);
		 */
		 
//ArrayList//
             ArrayList<Integer> al = new ArrayList<Integer>();
             al.add(85);
             al.add(67);
//HashMap//
		HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
		hm.put(1,9);
		hm.put(5,8);
		hm.put(2,5);
		System.out.println(hm);
		
		for(Integer i : hm.keySet())
		{
			System.out.println( "Key: "+i+" & Value: "+ hm.get(i));
		}
		
		/* for( KeyDataType variable : hm.keyset() )
		 * {
		 *   //variable = key;
		 *   //hm.get(variable) returns value
		 * }
		 */
//HashSet//
        HashSet<Integer> hs1 = new HashSet<Integer>();
        
        hs1.add(10);
        hs1.add(5);
        hs1.add(10);
        hs1.add(3);
        hs1.add(3);
        hs1.add(1);
        System.out.println(hs1); 
        
        System.out.println("------------------");
        
        Iterator<Integer> iths1 = hs1.iterator();
        while( iths1.hasNext() )
        	System.out.println( iths1.next() );
        
        /*
         * Iterator<data type> = HashSet<data type>
         */
//Basic comparator//
        ArrayList<Integer> ali = new ArrayList<>();
        ali.add(45);
        ali.add(6);
        ali.add(34);
        ali.add(45);
        ali.add(12);
        Collections.sort(ali,new Comparator<Integer>() {
        	public int compare(Integer a,Integer b) 
            {
        	    return b-a;
            }
        });
        System.out.println(ali);
        /* a-b -> ascending
         * b-a -> descending */
//Tree Set//
import java.util.*;
public class TreeSetJava {
	public static void main(String[] args) {
		TreeSet<Integer> it1 = new TreeSet<Integer>();
		it1.add(89);
		it1.add(45);
		it1.add(60);
		System.out.println(it1);
	}
}


//Vector//
	public static void main(String[] args) {
		Vector<Integer> vi = new Vector<Integer>(10,99);
		vi.add(4);
		vi.add(6);
		System.out.println(vi);
		
	}
}
//Copy//
(**)List,Vector,set can copy each other
Ex:
-->Code
import java.util.*;
public class Copy {
	public static void main(String[] args) {
		Vector<Integer> vi = new Vector<Integer>(10,99);
		vi.add(4);
		vi.add(6);
		LinkedList<Integer> ill = new LinkedList<Integer>(vi);
		ill.add(56);
		System.out.println("Vector: "+vi);
		System.out.println("List: "+ill);
	}
}
-->Output
Vector: [4, 6]
List: [4, 6, 56]
-->Code
        HashSet<Integer> hs1 = new HashSet<Integer>();
        hs1.add(10);
        hs1.add(5);
        hs1.add(10);
        hs1.add(3);
        hs1.add(3);
        hs1.add(1);
        LinkedList<Integer> ill01 = new LinkedList<Integer>(hs1);
        ill01.add(100);
	System.out.println("Set: "+hs1);
	System.out.println("List: "+ill01);
-->Output
Set: [1, 3, 5, 10]
List: [1, 3, 5, 10, 100]
So:
..DS TYPE01<Data type x> a = new ....DS TYPE01<Data type x>(a1);
DS TYPE01 = any ds type
a1 = any ds type
data type x = has to be same for a and a1
Memory of a != Memory of a1
